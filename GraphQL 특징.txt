REST API는 리소스 중심의 설계를 따르며, 각 리소스는 고유한 URI를 가짐
즉 리소스마다 고유한 엔드포인트를 개발해야함.
+ 엔드포인트에 맞는 DTO

GraphQL은 이런 문제를 해결하기 위해 단일 엔드 포인트 구조
-> 하나의 DTO로 여러 요구사항에 맞는 데이터를 처리할 수 있음
-> 관리해야할 엔드포인트와 코드의양을 줄여줘 유지보수에 훨씬 유리함을 주게됨


한 화면을 그리기 위해 API 요청을 하는 경우.

- REST API
- 여러 번의 요청이 필요함
-> 이를 언더패칭문제라고 함
-> 또한 불필요한 데이터가 포함되어 있더라도 무조건 수신하게됨
-> 오버패칭문제

- GraphQL
- 단일 쿼리를 통해 한번의 요청이 필요함
-> 네트워크 효율 향상
-> 또한 원하는 데이터 필드만 지정해서 갖고올 수 있음
-> 오버 패칭 방지 및 네트워크 대역폭 절약


앱의 UI가 변경되는 경우.

- REST API
- 기존의 API에 필요한 데이터 필드를 추가하는것
-> 오버 패칭에 대한 네트워크 대역폭 낭비가 더 심해지는 문제가 있다.
- 새로운 엔드포인트를 추가하는 것
-> 관리해야할 엔드포인트가 늘어나는 문제


- GraphQL
- 서버에서 업데이트된 필드에 대한 쿼리만 변경하면 됨
-> 오버패칭, 관리해야할 엔드포인트가 늘어나는 문제 해결



문서화.

- REST API 
- REST API의 문서화는 API 코드와 별도로 유지 관리됨
-> 가끔 코드와 문서간의 브릿지 발생
-> 필드명 브릿지가 발생하여 휴먼에러가 발생할 수 있음


- GraphQL
- 스키마 정의 언어 SDL을 통해 스키마를 정의
- 서버에서 API의 모든 타입, 필드 쿼리를 명확하게 기술
-> 스키마 자체가 문서 역할을 함
