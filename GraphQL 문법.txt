GraphQL 문법은 크게 두가지 관점으로 나눌 수 있다.

1. 클라이언트에서 서버로 GraphQL 요청을 하는 것
2. 서버에서 스키마를 작성하는 것




먼저 1. 클라이언트에서 서버로 GraphQL 요청을 하는 것의 경우

서버에 요청을 할 때 Operation과 SelectionSet 두가지 요소가 포함되어야 한다.


- Operation
1. Query
-> 데이터 조회를 위한 오퍼레이션으로 서버에서 데이터를 읽어오는데 사용
2. Mutation
-> 데이터를 수정하거나 추가하고 서버에서 결과 값을 반환할 수 있는 오퍼레이션
3. Subscription
-> 실시간 데이터를 받기 위한 오퍼레이션, 서버에서 특정 이벤트가 발생할 때마다 클라이언트로 데이터를 푸시할 수 있다.


- SelectionSet
-> 클라이언트가 서버에서 받을 데이터를 중괄호로 감싼 형태
-> 내부의 필드는 서버로부터 요청하려는 데이터

- SelectionSet 필드
1. Scalar 타입
-> 더이상 하위 데이터 타입을 가질 수 없는 최종적인 값

2. Enum 타입
-> 서버에서 스키마를 작성할 때 Enum 타입을 정의하기 위한 문법, 문자열과 똗같다.

3. non,NULL 타입
-> 기본적으로 GraphQL의 모든 타입은 널 값이 허용되는 널어블 타입
-> [Int], [Float!], [String]!, [Boolean!]! 

4. 리스트 타입
-> [Int], [Float], [String], [Boolean]




Arguments vs Variable

- Arguments
query getPlanet{
  planet(id : "cGxhbmV0czox"){
    id
    name
    gravity
  }
}

- Variable
QUERY
query getPlanet($id: ID!){
  planet(id: $id){
    id
    name
    gravity
  }
}
VARIVABLES
{
  "id":"cGxhbmV0czox"
}

-> 재사용하기 쉽고, 외부에서 변경하기 쉬운 Variable을 주로 사용


Alias, Fragments

-Alias

query getPlanet($id: ID != "cGxhbmV0czox" , $yourId : ID! = "cGxhbmV0czo0" ){
  yourPlanet : planet(id: $yourId){
    id
    name
    gravity
  }
  myPlanet : planet(id: $id){
    id
    name
    gravity
  }
}

-Fragments

fragment PlanetFields on Planet{
    id
    name
    gravity
  filmConnection(first : $first){
    films{
      id
      title
    }
  }
}


query getPlanet($id: ID != "cGxhbmV0czox" , $yourId : ID! = "cGxhbmV0czo0", $first : Int! = 2){
  yourPlanet : planet(id: $yourId){
    ...PlanetFields
  }
  myPlanet : planet(id: $id){
    ...PlanetFields
    created
  }
}

fragment PlanetFields on Planet{
    id
    name
    gravity
  filmConnection(first : $first){
    films{
      id
      title
    }
  }
}


-Directives, Inline Fragments, _typename



-Directives
-> Variable과 함께 사용해서 특정 필드를 동적으로 쿼리에 포함시키거나 제외시킴

query getPlanet($id: ID != "cGxhbmV0czox" , $yourId : ID! = "cGxhbmV0czo0", $first : Int! = 2, $isAnonymous : Boolean!){
  yourPlanet : planet(id: $yourId) @skip(if: $isAnonymous){
    ...PlanetFields
  }
  myPlanet : planet(id: $id){
    ...PlanetFields
    created
  }
}

query getPlanet($id: ID != "cGxhbmV0czox" , $yourId : ID! = "cGxhbmV0czo0", $first : Int! = 2, $isAnonymous : Boolean!, $isMine : Boolean!){
  yourPlanet : planet(id: $yourId) @skip(if: $isAnonymous){
    ...PlanetFields
  }
  myPlanet : planet(id: $id) @include(if : $isMine){
    ...PlanetFields 
    created
  }
}

{
  "isAnonymous" : false,
  "isMine" : true
}


- Inline Fragments, _typename

query node{
  node(id : "cGVvcGxlOjE="){
    __typename
    ... on Planet{
      id
      name
      created
    }
    ... on Person{
      id
      name
      birthYear
    }
  }
}
query people{
  allPeople{
    people{
      id
    }
  }
}


- Introspection, Meta Fields

- Introspection, 
-> GraphQL 서버의 스키마에 대한 정보를 쿼리할 수 있게 해주는 기능
-> 이 기능을 통해 클라이언트 도구에서 문서화와 자동완성을 제공
-> 기능의 핵심에 메타필드가 있음


- Meta Fileds
-> GraphQL의 스키마에 대한 정보를 제공
-> 별도의 작성 없이 자동으로 생성되는 필드
-> __schema, __type, __typename

{
  __schema{
    queryType{
      name
      fields{
        name
      }
    }
    mutationType{
      name
    }
    subscriptionType{
      name
    }
    directives{
      name
    }
  }
}


{
  __type(name : "Query"){
    name
    fields{
      name
      type{
        name
      }
      args{
        name
      }
    }
  }
}


{
  allPlanets{
    planets{
      __typename
    }
  }  
}
